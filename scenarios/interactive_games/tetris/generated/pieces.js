// pieces.js - テトリミノ定義とユーティリティ
export const TETROMINO_TYPES = ['I','O','T','S','Z','J','L'];

// Super Rotation System (SRS) を簡易実装
// 各ピースの回転状態 (0, R, 2, L)
export const SHAPES = {
  I: [
    [ [0,1],[1,1],[2,1],[3,1] ], // 0
    [ [2,0],[2,1],[2,2],[2,3] ], // R
    [ [0,2],[1,2],[2,2],[3,2] ], // 2
    [ [1,0],[1,1],[1,2],[1,3] ]  // L
  ],
  O: [
    [ [1,0],[2,0],[1,1],[2,1] ], // 0
    [ [1,0],[2,0],[1,1],[2,1] ], // R
    [ [1,0],[2,0],[1,1],[2,1] ], // 2
    [ [1,0],[2,0],[1,1],[2,1] ]  // L (回転なし)
  ],
  T: [
    [ [1,0],[0,1],[1,1],[2,1] ],
    [ [1,0],[1,1],[2,1],[1,2] ],
    [ [0,1],[1,1],[2,1],[1,2] ],
    [ [1,0],[0,1],[1,1],[1,2] ]
  ],
  S: [
    [ [1,0],[2,0],[0,1],[1,1] ],
    [ [1,0],[1,1],[2,1],[2,2] ],
    [ [1,1],[2,1],[0,2],[1,2] ],
    [ [0,0],[0,1],[1,1],[1,2] ]
  ],
  Z: [
    [ [0,0],[1,0],[1,1],[2,1] ],
    [ [2,0],[1,1],[2,1],[1,2] ],
    [ [0,1],[1,1],[1,2],[2,2] ],
    [ [1,0],[0,1],[1,1],[0,2] ]
  ],
  J: [
    [ [0,0],[0,1],[1,1],[2,1] ],
    [ [1,0],[2,0],[1,1],[1,2] ],
    [ [0,1],[1,1],[2,1],[2,2] ],
    [ [1,0],[1,1],[0,2],[1,2] ]
  ],
  L: [
    [ [2,0],[0,1],[1,1],[2,1] ],
    [ [1,0],[1,1],[1,2],[2,2] ],
    [ [0,1],[1,1],[2,1],[0,2] ],
    [ [0,0],[1,0],[1,1],[1,2] ]
  ]
};

// Canvas の fillStyle では CSS カスタムプロパティ (var(--c-i) など) が解決されず
// 無効色として黒く描画されてしまうブラウザがあるため、直接16進カラーを保持する。
// (styles.css の :root 定義と同じ値を同期)
export const COLORS = {
  I: '#00c7d4',
  O: '#f8d648',
  T: '#b563f9',
  S: '#58d26b',
  Z: '#f04747',
  J: '#3f6ff4',
  L: '#f5a14c'
};

export class BagRandomizer {
  constructor() {
    this.bag = [];
  }
  next() {
    if (this.bag.length === 0) {
      this.bag = [...TETROMINO_TYPES];
      for (let i = this.bag.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [this.bag[i], this.bag[j]] = [this.bag[j], this.bag[i]];
      }
    }
    return this.bag.pop();
  }
}

export function getShape(type, rotation) {
  return SHAPES[type][rotation % 4];
}
